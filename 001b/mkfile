< ../config.mk

all:QV:
	bin/targets | xargs mk

results/%.header.sam:Q: data/SNAP_bams/%.bam
	echo "[DEBUGGING] extracting header from $prereq"
	mkdir -p $(dirname $target)
	samtools view -H $prereq > $target.build \
	&& mv $target.build $target

results/%.chrM.body:Q: data/SNAP_bams/%.bam
	echo "[DEBUGGING] grepping for chrM, results in $target"
	mkdir -p $(dirname $target)
	samtools view $prereq | grep -P "\tchrM__" > $target.build \
	&& mv $target.build $target

results/%.chrM.bam:Q: results/%.header.sam results/%.chrM.body
	echo "[DEBUGGING] crating mitochondrial bam in $target"
	cat $prereq | samtools view -S -b - > $target.build \
	&& mv $target.build $target

results/R1_Mito_%.fastq results/R2_Mito_%.fastq:Q: results/%.chrM.bam
	echo "[DEBUGGING] splitting mitochondrial $prereq into $target"
	mkdir -p $(dirname $target)
	R1_FILE=$(echo $target | cut -d" " -f1)
	R2_FILE=$(echo $target | cut -d" " -f2)
	echo "[DEBUGGING] R1 file is $R1_FILE"
	echo "[DEBUGGING] R2 file is $R2_FILE"
	bamToFastq -i $prereq -fq $R1_FILE.build -fq2 $R2_FILE.build \
	&& mv $R1_FILE.build $R1_FILE \
	&& mv $R2_FILE.build $R2_FILE

results/%.unmapped.f12F56:Q: data/SNAP_bams/%.bam
	echo "[DEBUGGING] extracting unmapped reads with unmapped mate (-f12) and not primary alligment (-F256)."
	mkdir -p $(dirname $target)
	samtools view -u -f 12 -F 256 $prereq > $target.build \
	&& mv $target.build $target

results/%.unmapped.f8F260:Q: data/SNAP_bams/%.bam
	echo "[DEBUGGING] extracting mapped reads (-F260 -meaning NOT read unmapped) whose mate is unmapped (-f8)."
	mkdir -p $(dirname $target)
	samtools view -u -f 8 -F 260 $prereq > $target.build \
	&& mv $target.build $target

results/%.unmapped.f4F264:Q: data/SNAP_bams/%.bam
	echo "[DEBUGGING] extracting unmapped reads (-f4) whose mate is mapped (-F264 -meaning NOT mate unmapped)."
	mkdir -p $(dirname $target)
	samtools view -u  -f 4 -F 264 $prereq > $target.build \
	&& mv $target.build $target

results/%.unmapped.bam:Q: results/%.unmapped.f4F264 results/%.unmapped.f8F260 results/%.unmapped.f12F56
	echo "[DEBUGGING] creating nonalligned bam in $target"
	mkdir -p $(dirname $target)
	samtools merge -u - $prereq | samtools sort -n - $target.build \
	&& mv $target.build.bam $target

results/R1_nonalligned_%.fastq results/R2_nonalligned_%.fastq:Q: results/%.unmapped.bam
	echo "[DEBUGGING] splitting nonalligned $prereq into $target"
	mkdir -p $(dirname $target)
	R1_FILE=$(echo $target | cut -d" " -f1)
	R2_FILE=$(echo $target | cut -d" " -f2)
	echo "[DEBUGGING] R1 file is $R1_FILE"
	echo "[DEBUGGING] R2 file is $R2_FILE"
	bamToFastq -i $prereq -fq $R1_FILE.build -fq2 $R2_FILE.build \
	&& mv $R1_FILE.build $R1_FILE \
	&& mv $R2_FILE.build $R2_FILE

results/R1_formito_%.fastq.gz:Q: results/R1_Mito_%.fastq results/R1_nonalligned_%.fastq
	echo "[DEBUGGING] compressing R1 reads into $target"
	cat $prereq | gzip -f -9 > $target.build \
	&& mv $target.build $target

results/R2_formito_%.fastq.gz:Q: results/R2_Mito_%.fastq results/R2_nonalligned_%.fastq
	echo "[DEBUGGING] compressing R2 reads into $target"
	cat $prereq | gzip -f -9 > $target.build \
	&& mv $target.build $target

clean:V:
	set -x
	find results/ -type f ! -name "*.fastq.gz" -exec rm "{}" \;
